<xten name="object-list" element="div">
    <mandatory>name</mandatory>
    <allow>owner, admin</allow>

    <style>
        position: relative;
    </style>

    <css>
        .wx-xten-object-list .wx-view-list-item {position: relative; width: 100%;}
        .wx-xten-object-list .wx-view-list-parent {position: relative;}
        .wx-xten-object-list .wx-view-list-parent:not(tbody) {display: flex; flex-wrap: wrap; width: 100%;}
        .wx-xten-object-list .object-list-toolbar {display: none;}
        .wx-xten-object-list .object-item-toolbar {display: none;}
        .wx-xten-object-list.wx-state-editable .object-list-toolbar {display: inline-block;}
        .wx-xten-object-list.wx-state-editable .object-item-toolbar {display: inline-block;}
    </css>
    <cssNode>
        #[$id] .wx-view-list-parent:not(tbody) {flex-direction: [$orientation||row]; gap:[$item-gap||0];}
        #[$id] .wx-view-list-parent:not(tbody) .wx-view-list-item {
            flex-basis: 1 0 0px; 
            width: calc((100% / [$columns||1]) - [$item-gap||0px] * ([$columns||1] - 1) / [$columns||1] );
            [$list-item-style|| ]
        }
    </cssNode>

    <load>
    <%
        /*var startTime = common.startTimer();*/
        /* const styles = node.findChild('style'); */
        const name = node.getValue('name');

        const objType = node.getValue('object-type');
        if (!objType) {
            node.attribs.error = 'object-type is mandatory';
            common.error(node.attribs.error);
            return;
        }

        const configNode = common.findNamed(node, 'object-config', objType);
        if (!configNode) {
            node.attribs.error = 'could not find object-config for object-type ' + objType;
            common.error(node.attribs.error);
            return;
        }

        const listViewName = node.getValue('list-view') || 'default';
        const listViewNode = configNode.findNamedChild('list-view', listViewName);
        if (!listViewNode) {
            node.attribs.error = 'list-view ' + listViewName + ' not found in object-type ' + objType;
            common.error(node.attribs.error);
            return;
        }

        const listView = listViewNode.clone();

        const vars = node.attribs;
        const query = context.query || {};
        const session = context.session || {};

        const sessionData = session[name] || {};

        var pageSize = node.getValue('pagesize') || sessionData.pagesize || vars[objType + '-pagesize'] || configNode.getValue('pagesize');
        pageSize = pageSize ? parseInt(pageSize.toString().trim()) : 0;

        var pageNumber = node.getValue('pagenum') || sessionData.pagenum || context.vars[objType + '-pagenum'] || query[objType + '-pagenum'];
        pageNumber = pageNumber ? parseInt(pageNumber.toString().trim()) : 1;

        const sort = node.getValue('sort') || sessionData.sort || vars[objType + '-sort'] || configNode.getValue('sort') || 'created:-1';
        const _sort = common.nameValueStr2Json(sort);

        const label = node.getValue('label') || configNode.getValue('label') || common.toCamelCase(objType);
        const plural = node.getValue('plural') || configNode.getValue('plural') || (common.toCamelCase(objType) + 's');
        const orientation = node.getValue('orientation') || vars[objType + '-orientation'] || configNode.getValue('orientation') || 'column';

        const searchText = node.getValue('search-text');
        const parent = node.getValue('parent');
        const category = node.getValue('category');
        const _selector = node.getValue('selector');

        const collection = configNode.getValue('collection');

        var selector = {
            type: objType
        };

        if (searchText) {
            selector['$text'] = { $search: searchText };
        }

        if (parent) {
            selector.parent = parent;
        }

        if (category) {
            selector.category = category;
        }

        if (_selector) {
            const list = common.nameValueStr2Json(_selector);
            selector = common.extend(selector, list);
        }

        /*
        if (query) {
            const pageSelector = name + '-pagenum';
            for (var prop in query) {
                selector[prop] = query[prop];
            }
        }
        */

        const data = await database.getObjectList(selector, pageSize, pageNumber, _sort, collection);
        if (data.rc != 'success') {
            common.nodeerror('System Error', data.rc);
            return;
        }

        const _vars = {};
        _vars['object-type'] = objType;
        _vars['object-label'] = label;
        _vars['object-plural'] = plural;

        if (!data.docs || !data.docs.length) {
            const emptyViewName = node.getValue('empty-view') || 'default';
            var emptyView = listView.findNamedChild('empty-view', emptyViewName);
            if (!emptyView) {
                node.attribs.error = 'list-view ' + listViewName + ' does not have empty view ' + emptyViewName + '. object-type' + objType;
                common.error(node.attribs.error);
                return;
            }
            emptyView = emptyView.clone();

            node.empty();
            node.insertChildren(0, emptyView.children);

            common.substituteVars(node, _vars, true, common.recordPattern);
            common.substituteVars(node, node.attribs);
            xtensions.processXtens(node, context);
            return;
        }

        const dataViewName = node.getValue('data-view') || 'default';
        var dataView = listView.findNamedChild('data-view', dataViewName);
        if (!dataView) {
            node.attribs.error = 'list-view ' + listViewName + ' does not have data view ' + dataViewName + '. object-type' + objType;
            common.error(node.attribs.error);
            return;
        }
        dataView = dataView.clone();

        const placeholderList = dataView.find('list-items');
        if (placeholderList.length != 1) {
            node.attribs.error = 'list-view ' + listViewName + ' should have 1 placeholder for list-items. object-type ' + objType;
            common.error(node.attribs.error);
            return;
        }
        const placeholder = placeholderList[0];

        const listParent = placeholder.parent;
        if (listParent.children.length != 1) {
            node.attribs.error = 'in list-view ' + listViewName + ' parent of list-item template should not contain anything other than list-item template. object-type ' + objType;
            common.error(node.attribs.error);
            return;
        }

        const listItemName = placeholder.attribs.name || 'default';
        listParent.empty();
        listParent.addClass('wx-state-orientation-' + orientation);
        listParent.addClass('wx-view-list-parent');

        const listItemView = listView.findNamedChild('list-item-view', listItemName);
        if (!listItemView) {
            node.attribs.error = 'list-view ' + listViewName + ' does not have list-item-view ' + listItemName + '. object-type ' + objType;
            common.error(node.attribs.error);
            return;
        }

        if (listItemView.children.length != 1) {
            node.attribs.error = 'list-item-view ' + listItemName + ' in list-view ' + listViewName + '  should hae only one child. object-type ' + objType;
            common.error(node.attribs.error);
            return;
        }

        const pages = data ? data.pages : 1;
        const list = data && data.docs ? data.docs : [];

        for (var i = 0; i < list.length; i++) {
            const rec = list[i];

            rec['object-list-idx'] = i.toString();
            rec['object-serial-number'] = (i + 1).toString();
            rec['object-name'] = rec.name;

            for (var prop in rec['indexed-urls']) {
                rec['url-' + prop] = rec['indexed-urls'][prop];
            }
            
            const li = listItemView.clone();
            li.children[0].addClass('wx-view-list-item');
            li.children[0].attribs.id = "x-" + common.uuid();
            li.children[0].attribs['object-name'] = rec.name;
            li.children[0].attribs['object-type'] = objType;
            common.substituteVars(li, rec, true, common.recordPattern);
            common.substituteVars(li, node.attribs);
            /*xtensions.processXtens(li, context);*/

            listParent.insertChildren('last', li.children);
        }

        node.empty();
        node.insertChildren(0, dataView.children);

        common.substituteVars(node, _vars, true, common.recordPattern);
        common.substituteVars(node, node.attribs);
        /*common.endTimer(startTime, '=> object-list load before process xtens.');*/

        /*var startTime = common.startTimer();*/
        xtensions.processXtens(node, context);

        /* node.insertChild(0, styles); */
        /*common.endTimer(startTime, '=> object-list load process xtens.');*/
    %>
    </load>
</xten>
